// Generated by BUCKLESCRIPT VERSION 4.0.0, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var $$Array = require("bs-platform/lib/js/array.js");
var Block = require("bs-platform/lib/js/block.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var Text$BsReactNative = require("bs-react-native/lib/js/src/components/text.js");
var View$BsReactNative = require("bs-react-native/lib/js/src/components/view.js");
var Style$BsReactNative = require("bs-react-native/lib/js/src/style.js");
var RNEvent$BsReactNative = require("bs-react-native/lib/js/src/RNEvent.js");
var PanResponder$BsReactNative = require("bs-react-native/lib/js/src/panResponder.js");

var component = ReasonReact.reducerComponent("VerticalSlider");

function getBottomOffsetFromValue(value, rangeMin, rangeMax, barHeight) {
  return (value - rangeMin | 0) / (rangeMax - rangeMin | 0) * barHeight;
}

function getValueFromBottomOffset(offset, rangeMin, rangeMax, barHeight) {
  return (rangeMax - rangeMin | 0) * offset / barHeight;
}

function capValue(value, min, max) {
  var match = value <= min;
  if (match) {
    return min;
  } else {
    var match$1 = value >= max;
    if (match$1) {
      return max;
    } else {
      return value | 0;
    }
  }
}

function calculateStepStateFromOffset(steps, barHeight, value) {
  var t = barHeight / steps;
  var roundedStep = value / t | 0;
  return /* record */[
          /* offset */roundedStep * t,
          /* value */roundedStep
        ];
}

function generateStepMarkers(steps, barHeight) {
  var offset = barHeight / steps;
  var offsets = Caml_array.caml_make_vect(steps - 1 | 0, 0);
  for(var i = 0 ,i_finish = steps - 2 | 0; i <= i_finish; ++i){
    Caml_array.caml_array_set(offsets, i, (i + 1 | 0) * offset);
  }
  return List.map((function (offsetItem) {
                return ReasonReact.element(Pervasives.string_of_float(offsetItem), undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                          Style$BsReactNative.borderRadius(5),
                                          /* :: */[
                                            Style$BsReactNative.marginBottom(/* Pt */Block.__(0, [10])),
                                            /* :: */[
                                              Style$BsReactNative.backgroundColor(/* String */Block.__(0, ["#867666"])),
                                              /* :: */[
                                                Style$BsReactNative.position(/* Absolute */0),
                                                /* :: */[
                                                  Style$BsReactNative.height(/* Pt */Block.__(0, [3.5])),
                                                  /* :: */[
                                                    Style$BsReactNative.width(/* Pt */Block.__(0, [23])),
                                                    /* :: */[
                                                      Style$BsReactNative.bottom(/* Pt */Block.__(0, [offsetItem + 35 / 4])),
                                                      /* [] */0
                                                    ]
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[]));
              }), $$Array.to_list(offsets));
}

function make(onStepMet, onHorizontalStep, hasFocus, _) {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function (self) {
              var stepState = calculateStepStateFromOffset(6, self[/* state */1][/* barHeight */0], getBottomOffsetFromValue(capValue(self[/* state */1][/* value */2], 0, 100), 0, 100, self[/* state */1][/* barHeight */0]));
              var match = self[/* state */1][/* barHeight */0] > 0;
              return ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                        Style$BsReactNative.alignItems(/* Center */2),
                                        /* :: */[
                                          Style$BsReactNative.justifyContent(/* Center */2),
                                          /* [] */0
                                        ]
                                      ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                              ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                  Style$BsReactNative.flex(1),
                                                  /* :: */[
                                                    Style$BsReactNative.alignItems(/* Center */2),
                                                    /* :: */[
                                                      Style$BsReactNative.marginHorizontal(/* Pt */Block.__(0, [20])),
                                                      /* :: */[
                                                        Style$BsReactNative.paddingVertical(/* Pt */Block.__(0, [35 / 2])),
                                                        /* [] */0
                                                      ]
                                                    ]
                                                  ]
                                                ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[
                                        ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, (function ($$event) {
                                                      var layoutData = RNEvent$BsReactNative.NativeLayoutEvent[/* layout */0]($$event);
                                                      return Curry._1(self[/* send */3], /* SetBarHeight */Block.__(0, [layoutData[/* height */3]]));
                                                    }), undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                            Style$BsReactNative.flexGrow(1),
                                                            /* :: */[
                                                              Style$BsReactNative.backgroundColor(/* String */Block.__(0, ["#E1B80D"])),
                                                              /* :: */[
                                                                Style$BsReactNative.width(/* Pt */Block.__(0, [10])),
                                                                /* :: */[
                                                                  Style$BsReactNative.borderRadius(10),
                                                                  /* [] */0
                                                                ]
                                                              ]
                                                            ]
                                                          ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[])),
                                        ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, PanResponder$BsReactNative.panHandlers(PanResponder$BsReactNative.create(undefined, Js_primitive.some((function (param, param$1) {
                                                                  return PanResponder$BsReactNative.callback((function (_, _$1) {
                                                                                Curry._1(hasFocus, true);
                                                                                console.log("bar has focus!");
                                                                                return true;
                                                                              }), param, param$1);
                                                                })), undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some((function (param, param$1) {
                                                                  return PanResponder$BsReactNative.callback((function (_, _$1) {
                                                                                return Curry._1(hasFocus, false);
                                                                              }), param, param$1);
                                                                })), /* `callback */[
                                                            -16344635,
                                                            (function (param, param$1) {
                                                                return PanResponder$BsReactNative.callback((function (_, _gesture) {
                                                                              var newDeltaValue = getValueFromBottomOffset(-_gesture[/* dy */6], 0, 100, self[/* state */1][/* barHeight */0]);
                                                                              Curry._1(self[/* send */3], /* SetValue */Block.__(2, [self[/* state */1][/* value */2] + newDeltaValue]));
                                                                              if (stepState[/* value */1] !== self[/* state */1][/* step */3]) {
                                                                                Curry._1(self[/* send */3], /* UpdateStep */Block.__(3, [stepState[/* value */1]]));
                                                                                Curry._1(onStepMet, stepState[/* value */1]);
                                                                              }
                                                                              var horizontalStep = ((_gesture[/* moveX */1] | 0) - (_gesture[/* moveX */1] | 0) % 100 | 0) / 100 | 0;
                                                                              if (horizontalStep !== self[/* state */1][/* horizontalStep */4]) {
                                                                                console.log("Step- " + String(horizontalStep));
                                                                                var match = horizontalStep <= 2;
                                                                                var corrected = match ? horizontalStep : 2;
                                                                                Curry._1(self[/* send */3], /* UpdateHorizontalStep */Block.__(4, [corrected]));
                                                                                return Curry._1(onHorizontalStep, corrected);
                                                                              } else {
                                                                                return 0;
                                                                              }
                                                                            }), param, param$1);
                                                              })
                                                          ], undefined, undefined, undefined, /* () */0)), undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                            Style$BsReactNative.bottom(/* Pt */Block.__(0, [stepState[/* offset */0]])),
                                                            /* :: */[
                                                              Style$BsReactNative.borderRadius(35),
                                                              /* :: */[
                                                                Style$BsReactNative.width(/* Pt */Block.__(0, [35])),
                                                                /* :: */[
                                                                  Style$BsReactNative.height(/* Pt */Block.__(0, [35])),
                                                                  /* :: */[
                                                                    Style$BsReactNative.position(/* Absolute */0),
                                                                    /* :: */[
                                                                      Style$BsReactNative.backgroundColor(/* String */Block.__(0, ["#867666"])),
                                                                      /* [] */0
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]
                                                            ]
                                                          ])), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[])),
                                        match ? $$Array.of_list(generateStepMarkers(6, self[/* state */1][/* barHeight */0])) : ReasonReact.element(undefined, undefined, View$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(/* array */[]))
                                      ])),
                              ReasonReact.element(undefined, undefined, Text$BsReactNative.make(undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, Js_primitive.some(Style$BsReactNative.style(/* :: */[
                                                Style$BsReactNative.fontSize(/* Float */Block.__(0, [18])),
                                                /* [] */0
                                              ])), undefined, undefined, undefined, undefined, undefined, undefined, "Cups", /* array */[]))
                            ]));
            }),
          /* initialState */(function () {
              return /* record */[
                      /* barHeight */0,
                      /* deltaValue */0,
                      /* value */0,
                      /* step */0,
                      /* horizontalStep */0
                    ];
            }),
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */(function (action, state) {
              switch (action.tag | 0) {
                case 0 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* barHeight */action[0],
                                /* deltaValue */state[/* deltaValue */1],
                                /* value */state[/* value */2],
                                /* step */state[/* step */3],
                                /* horizontalStep */state[/* horizontalStep */4]
                              ]]);
                case 1 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* barHeight */state[/* barHeight */0],
                                /* deltaValue */action[0],
                                /* value */state[/* value */2],
                                /* step */state[/* step */3],
                                /* horizontalStep */state[/* horizontalStep */4]
                              ]]);
                case 2 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* barHeight */state[/* barHeight */0],
                                /* deltaValue */state[/* deltaValue */1],
                                /* value */action[0],
                                /* step */state[/* step */3],
                                /* horizontalStep */state[/* horizontalStep */4]
                              ]]);
                case 3 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* barHeight */state[/* barHeight */0],
                                /* deltaValue */state[/* deltaValue */1],
                                /* value */state[/* value */2],
                                /* step */action[0],
                                /* horizontalStep */state[/* horizontalStep */4]
                              ]]);
                case 4 : 
                    return /* Update */Block.__(0, [/* record */[
                                /* barHeight */state[/* barHeight */0],
                                /* deltaValue */state[/* deltaValue */1],
                                /* value */state[/* value */2],
                                /* step */state[/* step */3],
                                /* horizontalStep */action[0]
                              ]]);
                
              }
            }),
          /* subscriptions */component[/* subscriptions */13],
          /* jsElementWrapped */component[/* jsElementWrapped */14]
        ];
}

var circleDiameter = 35;

var ranges = /* record */[
  /* min */0,
  /* max */100,
  /* steps */6
];

exports.circleDiameter = circleDiameter;
exports.component = component;
exports.ranges = ranges;
exports.getBottomOffsetFromValue = getBottomOffsetFromValue;
exports.getValueFromBottomOffset = getValueFromBottomOffset;
exports.capValue = capValue;
exports.calculateStepStateFromOffset = calculateStepStateFromOffset;
exports.generateStepMarkers = generateStepMarkers;
exports.make = make;
/* component Not a pure module */
